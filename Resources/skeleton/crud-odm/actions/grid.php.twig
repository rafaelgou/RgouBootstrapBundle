
    /**
     * Lists all {{ entity }} documents.
     *
{% if 'annotation' == format %}
     * @Route("/", name="{{ route_name_prefix }}_ajaxdata")
     * @Template()
{% endif %}
     */
    public function ajaxdataAction()
    {

        $dm = $this->get('doctrine.odm.mongodb.document_manager');

        $mongodbutil = $this->container->get('rgou_bootstrap.util.mongodb');
        
        $query = $dm->getRepository('{{ bundle }}:{{ entity }}')
                 ->createQueryBuilder()
                 ->sort(
                    $this->get('request')->query->get('sortProperty', 'id'), 
                    $this->get('request')->query->get('sortDirection', 'asc')
                 );

        if ($this->get('request')->query->get('filter', false)) {
        
            $filters    = $this->get('request')->query->get('filter');
            $fieldMetadata = $this->getFieldMetadata();
        
            foreach($this->get('request')->query->get('filter') as $fieldName => $value) {
            
                $fieldMetadata = $this->getFieldMetadata($fieldName);
            
                if (is_array($value)) {
 
                    if (array_key_exists('from', $value)) {
                       $value['from'] = $mongodbutil->prepareValueForQuery($fieldMetadata['type'], $value['from']);
                        $query->field($fieldName)->gte($value['from']);
                    }

                    if (array_key_exists('to', $value)) {
                        $value['to']   = $mongodbutil->prepareValueForQuery($fieldMetadata['type'], $value['to']);
                        $query->field($fieldName)->lte($value['to']);
                    }

                } else {
                
                    $value = $mongodbutil->prepareValueForQuery($fieldMetadata['type'], $value);
                    $query->field($fieldName)->equals($value);
                    
                }
                
            }
            
        }
                 
        $paginator  = $this->get('knp_paginator');
        $pagination = $paginator->paginate(
            $query->getQuery(),
            $this->get('request')->query->get('page', 1),
            $this->get('request')->query->get('pageSize', 2)
        );

        $paginationData = $pagination->getPaginationData();
        $jsonData = array(
            'page'    => $paginationData['current'],
            'pages'   => $paginationData['pageCount'],
            'perpage' => $paginationData['numItemsPerPage'],
            'count'   => $paginationData['totalCount'],
            'data'    => $this->getAjaxData($pagination),
        );
        
        $headers = array(
            'Content-Type' => 'application/json'
        );

        return new Response(json_encode($jsonData), 200, $headers);

    }
    
    protected function getAjaxData(\Knp\Bundle\PaginatorBundle\Pagination\SlidingPagination $pagination)
    {
        $data = array();
        
        $mongodbutil = $this->container->get('rgou_bootstrap.util.mongodb');
        $inflector   = $this->container->get('rgou_bootstrap.util.inflector');

        foreach($pagination as $record)
        {
            $recordData = new \StdClass;
            
            foreach($this->getFieldMetadata() as $fieldName => $metadata) {
                $method = 'get' . $inflector->camelize($fieldName);
                $recordData->$fieldName = $mongodbutil->prepareValueForView($metadata['type'], $record->$method());
            }
            
            $actionsView = array();
            
            {%- for action in record_actions %}
            
            // {{ action }}
            $uri   = $this->get('router')->generate('{{ route_name_prefix ~'_'~ action }}', array('id' => $record->getId()));
            $label = $this->get('translator')->trans('{{ action }}', array(), 'rgoubootstrap');
            $actionsView[] = '<a class="btn btn-mini" href="' . $uri . '">'
                            . '{% if action == 'edit' %}<i class="icon-pencil"></i>{% endif %}{% if action == 'show' %}<i class="icon-eye-open"></i>{% endif %} '
                            . $label 
                            . '</a>';
            {%- endfor %}


            $recordData->record_actions = implode('', $actionsView);
            
            $data[] = $recordData;
            
        }
        
        return $data;
        
    }

    protected function getFieldMetadata($fieldName = null)
    {
        $fieldMetadata = array();
    
        foreach ($this->getGridColumns() as $field) {
            if (array_key_exists('type', $field) && !in_array($field['property'], array('record_actions'))) {
                $fieldMetadata[$field['property']] = $field;
            }
        }
        
        if (null === $fieldName) {
            return $fieldMetadata;
        } elseif (array_key_exists($fieldName, $fieldMetadata)) {
            return $fieldMetadata[$fieldName];
        } else {
            return null;
        }
        
        
    }    
    
    /**
     * Get FuelUX fields configuration
     * 
     * A field has this info:
     *
     * - property (required):      fieldname, same as table fieldname 
     * - type     (required):      model type (not used for FuelUX, but used on filter query)
     * - label    (required):      label on thead
     * - sortable (optional):      if the field will be allowed to sort - true/false, default true
     * - filtertype (optional):    type of filter, default input
     *                             - false:     not filtered
     *                             - input:     normal input text
     *                             - date:      input date, 
     *                             - daterange: two input date ("from" and "to") 
     *                             - select:    combobox with select (require filteroptions below)
     * - filteroptions (optional): array of select options in format
     *                              array('key1' => 'value1), 'key2' => 'value2),)
     *
     * @return array
     */
    protected function getGridColumns()
    {
        $columns = array(
        
    {%- for fieldname,field in fields %}

            array(
                'property'      => '{{ fieldname }}', 
                'type'          => '{{ field.type }}', 
                'label'         => '{{ fieldname | titleize }}', 
                'sortable'      => true,
                'filtertype'    => '{% if field.type == 'date' %}daterange{% else %}input{% endif %}',
                'filteroptions' => array(),
            ),

    {%- endfor %}

            // Do not change this unless you want to desactivate all actions
            array(
                'property'   => 'record_actions', 
                'label'      => $this->get('translator')->trans('Actions', array(), 'rgoubootstrap'), 
                'sortable'   => false,
                'filtertype' => false,
            )
        );
        
        return $columns;
    }

